# instalando paquetes
sudo apt update
sudo apt install postfix sensors -y

# compruebo estado
systemctl status postfix

# copio la version antigua del archivo
cp /etc/postfix/main.cf /etc/postfix/main.cf.old
vim /etc/postfix/main.cf
---------------------------------------------------------------------
relayhost = [smtp.gmail.com]:587
smtp_use_tls = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
smtp_address_preference = ipv4
---------------------------------------------------------------------

# agrego credenciales
vim /etc/postfix/sasl_passwd
---------------------------------------------------------------------
[smtp.gmail.com]:587 correo@gmail.com:tu_contrase√±a_o_clave_de_aplicaci√≥n
---------------------------------------------------------------------

# doy permisos 
chmod 600 /etc/postfix/sasl_passwd

# compatibilidad de postfix por una versi√≥n reciente y estable
postconf compatibility_level=3.6

# recargo servicio
sudo postfix reload

# enviar correo
echo "Correo de prueba enviado desde Postfix usando Gmail" | mail -s "Prueba Exitosa" destinatario@gmail.com

# comprobar que se a enviado
mailq                                       # Ver cola
tail -f /var/log/mail.log                   # Ver env√≠os en tiempo real y comprobar fallos

# desarrollo el script para avisar si la CPU sobrepasa los 80¬∫ (con el comando sensors)
vim /usr/local/bin/check_temp_cpu.sh
------------------------------------------------------------------------------------------------------
#!/bin/bash
GMAIL_TO="correo@gmail.com"
TEMP_LIMIT=80.0                             # temperatura l√≠mite realista
LOG_FILE="/var/log/check_temp.log"

# Leer temperatura
temp=$(sensors | awk '/Package id 0/ {gsub(/\+|¬∞C/, "", $4); print $4; exit}')
[[ -z "$temp" ]] && temp=$(sensors | awk '/Core 0/ {gsub(/\+|¬∞C/, "", $3); print $3; exit}')

if [[ -z "$temp" ]]; then
    echo "[$(date)] No se pudo leer la temperatura." >> "$LOG_FILE"
    exit 1
fi

if (( $(echo "$temp > $TEMP_LIMIT" | bc -l) )); then
    echo "[$(date)] Temperatura alta: $temp¬∞C." >> "$LOG_FILE"
    echo -e "‚ö†Ô∏è ALERTA:\n\nLa CPU de $(hostname) ha alcanzado los $temp¬∞C.\n\n√öltimas 20 l√≠neas del log:\n$(tail -n 20 "$LOG_FILE")" | mail -s "üîî‚ö†Ô∏è Alerta CPU - $temp¬∞C" "$GMAIL_TO"
fi
--------------------------------------------------------------------------------------------------------

# con cron en vez como servicio constante con systemctl
crontab -e
--------------------------------------------------------------------------------------------------------
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed
*/20 * * * * /usr/local/bin/check_temp_cpu.sh
--------------------------------------------------------------------------------------------------------
